Text File questions



Problem 01: Sample Paragraphs



- Which functions from utils.py will you use for interacting with the sample_paragraphs.txt file?

close, readable, readline, readlines



Problem 02: Words Per Minute



- Given a long string that contains a full paragraph (e.g. "This is my name. It is Bob. Also, I have a cat named Troy."), what function will you use to separate a string containing a full paragraph into its individual words?

split



- What is the calculation you will use in order to measure Words Per Minute speed? (You can describe your formula.)

1. save the starting time
2. save the ending time
3. subtract those two


- What is the calculation you will use in order to measure accuracy? (You can describe your formula.)

subtraction


Problem 03: Pig Latin



- How will you identify that a word starts with a consonant cluster? 

check if is not a, e, i, o, u



Problem 04: Autocorrect Skeleton



- How will you calculate the difference scores between the user input string and each valid word, and determine which difference is the smallest?

1. count the number of input string which matches each valid word
2. the bigger the number is, the smaller the difference



Problem 05: Score Function 



- What will your base case be?
0




- Identify two example inputs which fall into different recursive calls. In each of these cases, what recursive call should be made?

1. if the string is the same, return i
2. if the string is not the same, return i+1

recursive call should check the next character
ex. when we checked the 1st character, the recursive call should check the 2nd character



Problem 06: 



- What does each of the recursive calls in the skeleton represent? Are there additional cases which don't fit into the three already given?

each of the recursive calls in skeleton represent the function to the next character
there is no additional cases


- If we called score_function("bot", "boot"), list a series of successive recursive calls we would go through to reach the base case. For example, if we called score_function("add", "aadd"), one step could be score_function("add", "aadd") -> score_function("add", "add").

score_function("bot", "boot") -> score_function("bot", "bot")



- Based on your above list of recursive calls, classify each step as an add, remove, a swap, or something else.

remove 



- Why would your function choose this sequence of recursive calls over another?

because it has to convert the first string to the second

Problem 07: Accuracy



- In your own words, why do we need to improve the accuracy of our existing score_function? In other words, what is the problem that we are trying to solve?

we are going to find the smallest different measurement to change the character



- How can you adapt your score function from the previous problem to take into account key distances?
 (Hint: which recursive call will need to be modified?)

the condition for removing or adding additional cases should be modified



Problem 08: Efficiency



- What data structure will you use to store all of the differences that score_function has already calculated?

list



- What types of values will this data structure contain?

integer or float



- Using the data structure you described, given a pair of words, how will you check whether score_function has already been called on that pair of words? If so, how will you access the already calculated difference?

1. if the word is in the list return True
2. substitute the current difference in the already calculated difference